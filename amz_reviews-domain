#!/usr/bin/env ruby

require 'csv'
require 'watir'
require 'headless'

class AmazonReviews
  attr_reader :asin, :page_start, :page_end, :domain, :browser
  attr_accessor :review_data

  def initialize(asin, page_start, page_end, domain)
    @asin = asin
    @page_start = page_start.to_i
    @page_end = page_end.to_i
    @domain = domain

    @review_data = []
    @browser = new_browser
  end

  def call
    fetch
    save
  end

  def fetch
    puts "fetching reviews for product with ASIN #{asin}...\n"
    pages_numbers.each do |page_number|
      begin
        browser.goto product_url
        browser.goto reviews_url(page_number)
        log_progress(page_number)

        reviews = browser.divs(class: 'review')
        puts "UH OH: REVIEWS NOT FOUND." if reviews.count.zero?

        reviews.each do |review|
          begin
            review_data << scrape(review)
          rescue => e
            puts "ERROR: Failed to scrape review due to #{e.message}"
          end
        end
        autosave if (review_data.count % 50).zero?
      rescue => e
        puts "ERROR: Failed to fetch reviews due to #{e.message}"
      end
      sleep 1
    end
  end

  def save
    return if review_data.empty?

    CSV.open("amz-reviews-#{asin}.csv", "w") do |csv|
      headers = review_data.first.keys
      csv << headers
      review_data.each do |data|
        row = headers.map { |k| data[k] }
        csv << row
      end
    end
  end
  alias :autosave :save

  private

  def scrape(review)
    date_and_country = review.span(class: 'review-date')
    date_clean = nil
    country_clean = nil

    if date_and_country.present?
      date_clean = date_and_country.text.split(' on ')[1]
      country_clean = date_and_country.text.split(' on ')[0]
    end

    stars_clean = review.span(class: 'a-icon-alt').text.split(' out of')[0]

    {
      date: date_clean,
      country: country_clean,
      stars: stars_clean,
      reviewer: review.span(class: 'a-profile-name').text,
      title: review.a(class: 'review-title-content').text,
      body: review.span(class: 'review-text-content').text
    }
  end

  def reviews_url(page_number)
    "https://www.amazon.#{@domain}/product-reviews/#{asin}/?reviewerType=all_reviews&sortBy=recent&pageNumber=#{page_number}"
  end

  def product_url
    "https://www.amazon.#{@domain}/dp/#{asin}/"
  end

  def pages_numbers
    (page_start..page_end).to_a
  end

  def pages_count
    page_end - page_start
  end

  def log_progress(page_number)
    puts "fetching page #{page_number} (page #{page_number - page_start} of #{pages_count} total)"
  end

  def new_browser
    Watir::Browser.new :firefox, headless: true
  end
end

abort 'Must provide a product ASIN, page start, page end, and domain (e.g., .com or .de)' if ARGV.count < 4
asin, page_start, page_end, domain = ARGV[0], ARGV[1], ARGV[2], ARGV[3]
AmazonReviews.new(asin, page_start, page_end, domain).call
